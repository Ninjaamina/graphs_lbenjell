# src/graphs_lbenjell/sp.py

import sys
from heapq import heappush, heappop

def dijkstra(graph, source):
    dist = [sys.maxsize] * len(graph)
    dist[source] = 0
    heap = []
    heappush(heap, (0, source))
    path = {}
    path[source] = []
    
    while len(heap) > 0:
        w, u = heappop(heap)
        if w > dist[u]:
            continue
        for v in graph[u]:
            if w + graph[u][v] < dist[v]:
                dist[v] = w + graph[u][v]
                heappush(heap, (dist[v], v))
                path[v] = path.get(u, []) + [u]
    
    # Add the path to the destination nodes
    for node in path:
        path[node] = path[node] + [node]
    
    return dist, path
